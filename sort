#include <bits/stdc++.h>
using namespace std;
 
// Вспомогательная функция для замены двух элементов
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
 
/* Эта функция принимает последний элемент в качестве опорного, помещает
элемент поворота в правильном положении в отсортированном
массив и размещает все меньшие (меньше, чем точка опоры)
слева от точки поворота и всех больших элементов справа
поворота */

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1); // Индекс меньшего элемента и указывает правильное положение опорной точки, найденное до сих пор.
 
    for (int j = low; j <= high - 1; j++)
    {
        // Если текущий элемент меньше опорного
        if (arr[j] < pivot)
        {
            i++; // индекс увеличения меньшего элемента
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
 
/* Основная функция, реализующая QuickSort
arr[] --> Массив для сортировки,
low --> Начальный индекс,
high --> Конечный индекс */

void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi — это индекс разделения, arr[p] теперь
        в нужном месте */
        
        int pi = partition(arr, low, high);
 
        // Отдельно сортировать элементы перед
        // раздел и после раздела
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
 
/* Функция для печати массива */
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}
 
int main()
{
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    cout << "Sorted array: \n";
    printArray(arr, n);
    return 0;
}
